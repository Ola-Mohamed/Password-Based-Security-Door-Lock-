/*
 * MCU1.C
 *
 *  Created on: 13 Jul 2021
 *      Author: Ola Mohamed
 */

#include"MCU1.h"



int main(){


LCD_init() ;  /*initialization of LCD */
UART_init(&UART_config) ;
TIMER1_init(&TIMER1_config ) ;
createpassword(); /* first time password */
SET_BIT(SREG , 7) ; /*enabling global interrupt bit */


	while(1){





	}
}
/*-------------------------------------------------------------------------------
[Function Name]: createPassword
[Description]: make the user to put a new password
[Return]: void
 -------------------------------------------------------------------------------*/
void createpassword(void){
	/*
	 * 1. flag to check matching of re-entered password with new one
	 * 2.arrays to store new and re-entered passwords
	 * 3. loop that not exit from till matching occur
	 * 4. initially matched and if it isn't this flag equal zero
	 * 5.tell the user to "Enter New Password then go to next row
	 */

	uint8 i , matchingFlag = 0 ;
	uint8 newPassword [10] , reEnteredPassword [10] ;

	while(matchingFlag ==0){
		matchingFlag = 1;
		LCD_clearScreen() ;
		LCD_displayStringRowColumn(0 , 0 ,"Enter New Pass" );
		LCD_goToRowColumn( 1 , 0 ) ;

		/*
		 * 1. make the user to enter the new password
		 * 2.getting and store password from the keypad
		 * 3.show to user '*' at any password character
		 * 4. delay for debouncing
		 *
		 * */
		 for(i = 0 ; i < 5 ; i++){
		   newPassword [i] = KeyPad_getPressedKey() ;
		   LCD_displayString("*") ;
	    _delay_ms(1000);}
		 /* telling the user to Re-enter the password for safety*/
		 LCD_clearScreen() ;
		  LCD_displayStringRowColumn(0 , 0 , "Re-Enter New Pass" );
		  LCD_goToRowColumn( 1 , 0 ) ;
		   for(i = 0 ; i < 5 ; i++)
		   {
		    reEnteredPassword [i] = KeyPad_getPressedKey() ;
		  	LCD_displayString("*") ;
		   _delay_ms(1000) ;}
		  /*
		   *  1.checking the matching between new password and Re-entered one
		   *  2.at any unmatched character then zero matching flag and do the while loop again
		   *   */
		   for(i = 0 ; i < 5 ; i++){
		   if(reEnteredPassword [i] != newPassword [i] ){
		   LCD_clearScreen() ;
		   LCD_displayStringRowColumn(0 , 0 ,"Unmatched! again" );
		   _delay_ms(20000) ;
		   matchingFlag  = 0 ;
		   break ;
		    	    		}}}
	/*
	 * 1. after matching then copying password to the global array and putting '#' for UART_recieveByte technique
	 * 2. function to send password using UART*/
		for(i = 0 ; i < 6 ; i++)
		{
			g_password[i] = newPassword [i] ;
		}
		g_password[i] = '#' ;
		sendPasswordToMC2();
}


/*-------------------------------------------------------------------------------
[Function Name]:  sendPasswordToMC2
[Description]:  send password using UART
[Return]: void
 -------------------------------------------------------------------------------*/
void sendPasswordToMC2(void)
{
	/*
	 * 1.two Micro-controllers tells to us that they are ready for synchronization between them
	 * 2. wait until MC2 is ready
	 * */
	UART_sendByte(MC1_READY) ;
	while(UART_recieveByte() != MC2_READY);
	UART_sendString(g_password);
}


/*-------------------------------------------------------------------------------
[Function Name]: mainfunction
[Description]:  checks the password entered with saved one initially then
				even true then do the action user needed or wrong 3 times
				then buzzer start with 1 minute alerting
[Return]: void
 -------------------------------------------------------------------------------*/
void mainfunction(uint8 a_keyPressed)
{
	/*
	 * 1. matching flag for check matching entered password with saved one
	 * 2. wrong counter for counting till 3 wrong passwords enters
	 * 3. array to save entered password from user*/
	uint8 i , matchingFlag = 0 , wrongCounter = 0  ;
	uint8 enteredPassword[10];

	/*
	 * 1.two micro-controllers tells to us that they are ready
	 * 2.for synchronization between them
	 * */
   	while(UART_recieveByte() != MC2_READY);
	UART_sendByte(MC1_READY) ;
	UART_receiveString(g_password) ;

	/* LCD shows waiting for readability of the program*/
	LCD_clearScreen() ;
	LCD_displayStringRowColumn(0 , 0 , "waiting...") ;
	_delay_ms(1000);

	/*
	 * 1. loop that not exit from till matching occur or 3 wrong tries
	 * 2.initially matched and if it isn't this flag equal zero
	 * 3.tell the user to "Enter old Password then go to next row in LCD
	 * 4. getting and store entered password from the keypad
	 * 5. checking the matching between entered password from user and saved onr
	 *  */
	while((matchingFlag == 0) && (wrongCounter < 3))
	{
		matchingFlag = 1 ;
    	LCD_clearScreen() ;
		LCD_displayStringRowColumn(0 , 0 , "Enter Old Pass") ;
		LCD_goToRowColumn( 1 , 0 ) ;
		for(i = 0 ; i < 5 ; i++)
		{
			enteredPassword [i] = KeyPad_getPressedKey() ;
			LCD_displayString("*") ;
			_delay_ms(1000) ;

		}

	   	for(i = 0 ; i < 6 ; i++)
	    {
	    	if(enteredPassword [i] != g_password [i] )
	    	{
	    	    LCD_clearScreen() ;
	    	    LCD_displayStringRowColumn(0 , 0 ,"Wrong Password!" );
	    	    _delay_ms(30000) ;
	    	    wrongCounter++ ;
	    		matchingFlag  = 0 ;
	    		break ;
	    	}
	    }
	}
	/*
	 * 1.if the reason of exiting from the while loop was because of 3 times wrong entering
	 * 2.two micro-controllers tells to us that they are ready for synchronization between them
	 * 3.send to micro-controller 2 to switch on the buzzer for 1 minute
	 *4. display on LCD that it is a thief for more safety
	 * */
	if(wrongCounter >= 3)
	{
		UART_sendByte(MC1_READY) ;
		while(UART_recieveByte() != MC2_READY);
		UART_sendByte(BUZZER) ;

	    LCD_clearScreen() ;
	    LCD_displayStringRowColumn(0 , 0 ,"Thief!!!" );
		Timer1_OVF_setCallBack(Alert) ;

	    /* entering while loop for delaying till 1 minute passes
	     * then zero the flag from buzzerTermination function */
	    g_delayFlag = 1 ;
	    while(g_delayFlag == 1) ;
	}
	/* if the reason of exiting from the while loop was because of password is correct
	 * and operation is changing password by '*' pressing */
	else if (a_keyPressed == '*')
	{
		UART_sendByte(MC1_READY) ;
		while(UART_recieveByte() != MC2_READY);
		UART_sendByte(NEW_PASSWORD) ;
		createpassword() ;
	}
	/* if the reason of exiting from the while loop was because of password is correct
	 * and operation is opening the door by '%' pressing */
	else if(a_keyPressed == '%')
	{
		UART_sendByte(MC1_READY) ;
		while(UART_recieveByte() != MC2_READY);
		UART_sendByte(DOOR) ;

		/*display the status of the door in the fuction doorOperation */
	    LCD_clearScreen() ;
	    LCD_displayStringRowColumn(0 , 0 ,"DOOR IS :" );
	    Timer1_OVF_setCallBack(doorOptions) ;
	    /* entering while loop for delaying till door is opening and closing
	     * then zero the flag from buzzerTermination function */
	    g_delayFlag = 1 ;
	    while(g_delayFlag == 1) ;
	}


}
/*-------------------------------------------------------------------------------
[Function Name]:Alert
[Description]: calculate the time of buzzer then delay the whole system
[Return]: Void
 -------------------------------------------------------------------------------*/

void Alert(void){
	/*
	 * 1. of overflows of TIMER1
	 * 2.enable I bit */
	g_ticks++ ;
	LCD_displayStringRowColumn(1 , 0 ,"Catch him" );
	SET_BIT(SREG , 7) ;

	/*every tick (overflow) takes 0.5 sec then it is 1 minute */
	if(g_ticks >=120)
	{
	LCD_clearScreen() ;
	LCD_displayStringRowColumn(1 , 0 ,"Try again" );
	_delay_ms(10000) ;
	/*zero the delay to exit from the while loop of delaying */
	g_delayFlag = 0 ;
	g_ticks = 0 ; /* zero the ticks for any other interrupt*/
	Timer1_DeInit(); /* de-activate the timer*/

		}
}

void doorOptions(void){
/*
 * 1. No. of overflows of TIMER1
 * 2.AVR maybe clear this bit after interrupt
	then open it manually again
 * 3.every tick (overflow) takes 0.5 second then  at first 15 seconds door is opening
 * 4.the door holds for 3 seconds
 * 5.the last 15 seconds door is closing
 * 6.after 15 + 3 + 15 seconds operation is done
 * 7.zero the delay to exit from the while loop of delaying
 * 8.de-activate the timer
 */
	g_ticks++ ;
	SET_BIT(SREG , 7) ;
	if(g_ticks < 30)
	{
		LCD_displayStringRowColumn(1 , 0 ,"opening" );
	}
	else if(g_ticks < 36)
	{
		LCD_displayStringRowColumn(1 , 0 ,"holding" );
	}

	else if(g_ticks < 66)
	{
		LCD_displayStringRowColumn(1 , 0 ,"closing" );
	}

	else if(g_ticks >= 66)
	{
	  	LCD_clearScreen() ;
		LCD_displayStringRowColumn(1 , 0 ,"Done" );
		_delay_ms(10000) ;

		g_delayFlag = 0 ;
		g_ticks = 0 ;
		Timer1_DeInit();
	}
}
/*-------------------------------------------------------------------------------
[Function Name]:displayOptions
[Description]: displayOptions
[Return]: Void
 -------------------------------------------------------------------------------*/
void displayOptions(void){
	/*1. display options of application
	 * 2.waiting tell even '*' or '%' pressing
	 * 3.after pressing checking that it is the user from password
     then do the action needed*/
     LCD_displayStringRowColumn(0 , 0 , " *: Change Pass") ;
    LCD_displayStringRowColumn(1 , 0 , " %: Open Door") ;
    	keyPressed = KeyPad_getPressedKey();
    	if(keyPressed == '*' || keyPressed == '%' )
    	{
    	mainfunction(keyPressed);

    	}
}
